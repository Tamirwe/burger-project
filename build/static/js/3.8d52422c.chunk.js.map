{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/Auth/Auth.module.css","containers/Auth/Auth.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_module_css__WEBPACK_IMPORTED_MODULE_1__","_Input_module_css__WEBPACK_IMPORTED_MODULE_1___default","input","props","inputElement","inputClasses","css","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","a","createElement","Object","assign","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayName","Input","Label","label","module","exports","Auth","ContactData","state","controls","email","type","placeholder","validation","required","isEmail","valid","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","updateObject","_this","C_Users_tamir_source_repos_Learn_ReactCourse_burger_project_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","target","checkValidity","setState","submitHandler","preventDefault","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","_this2","formElementsArray","id","config","form","formElement","react__WEBPACK_IMPORTED_MODULE_6___default","_components_UI_Input_Input__WEBPACK_IMPORTED_MODULE_9__","loading","_components_UI_Spinner_Spinner__WEBPACK_IMPORTED_MODULE_11__","errorMessage","error","message","authRedirect","isAuthenticated","react_router_dom__WEBPACK_IMPORTED_MODULE_8__","to","onSubmit","_components_UI_Button_Button__WEBPACK_IMPORTED_MODULE_10__","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions"],"mappings":"0FAAA,IAAAA,EAAAC,EAAA,GAAAC,EAAAD,EAAAE,EAAAH,GAAAI,EAAAH,EAAA,KAAAI,EAAAJ,EAAAE,EAAAC,GAyDeE,IAtDD,SAACC,GACX,IAAIC,EAAe,KACbC,EAAe,CAACC,IAAIC,cAM1B,OAJGJ,EAAMK,SAAWL,EAAMM,gBAAkBN,EAAMO,SAC9CL,EAAaM,KAAKL,IAAIM,SAGlBT,EAAMU,aACV,IAAK,QACDT,EAAeN,EAAAgB,EAAAC,cAAA,QAAAC,OAAAC,OAAA,CACXC,UAAWb,EAAac,KAAK,MACzBhB,EAAMiB,cAFC,CAGXC,MAAOlB,EAAMkB,MACbC,SAAUnB,EAAMoB,WACpB,MACJ,IAAK,WACDnB,EAAeN,EAAAgB,EAAAC,cAAA,WAAAC,OAAAC,OAAA,CACXC,UAAWb,EAAac,KAAK,MACzBhB,EAAMiB,cAFC,CAGXC,MAAOlB,EAAMkB,MACbC,SAAUnB,EAAMoB,WACnB,MACL,IAAK,SACDnB,EACIN,EAAAgB,EAAAC,cAAA,UACIG,UAAWb,EAAac,KAAK,KAC7BE,MAAOlB,EAAMkB,MACbC,SAAUnB,EAAMoB,SACfpB,EAAMiB,cAAcI,QAAQC,IAAI,SAAAC,GAAM,OACnC5B,EAAAgB,EAAAC,cAAA,UAAQY,IAAKD,EAAOL,MAAOA,MAAOK,EAAOL,OACpCK,EAAOE,gBAK5B,MACA,QACIxB,EAAeN,EAAAgB,EAAAC,cAAA,QAAAC,OAAAC,OAAA,CACXC,UAAWb,EAAac,KAAK,MACzBhB,EAAMiB,cAFC,CAGXC,MAAOlB,EAAMkB,MACbC,SAAUnB,EAAMoB,WAG5B,OACIzB,EAAAgB,EAAAC,cAAA,OAAKG,UAAWZ,IAAIuB,OAChB/B,EAAAgB,EAAAC,cAAA,SAAOG,UAAWZ,IAAIwB,OAAQ3B,EAAM4B,OACnC3B,yBClDb4B,EAAAC,QAAA,CAAkBJ,MAAA,qBAAAC,MAAA,qBAAAvB,aAAA,4BAAAK,QAAA,6CCAlBoB,EAAAC,QAAA,CAAkBC,KAAA,mBAAAC,YAAA,8MCUZD,6MACFE,MAAQ,CACJC,SAAU,CACNC,MAAO,CACHzB,YAAa,QACbO,cAAc,CACVmB,KAAM,QACNC,YAAa,gBAEjBnB,MAAO,GACPoB,WAAW,CACPC,UAAS,EACTC,SAAS,GAEbC,OAAM,EACNlC,SAAS,GAEbmC,SAAU,CACNhC,YAAa,QACbO,cAAc,CACVmB,KAAM,WACNC,YAAa,YAEjBnB,MAAO,GACPoB,WAAW,CACPC,UAAS,EACTI,UAAW,GAEfF,OAAM,EACNlC,SAAS,IAGjBqC,UAAU,KASdC,oBAAsB,SAACC,EAAOC,GAC1B,IAAMC,EAAkBC,YAAaC,EAAKjB,MAAMC,SAAZrB,OAAAsC,EAAA,EAAAtC,CAAA,GAC/BkC,EAAaE,YAAaC,EAAKjB,MAAMC,SAASa,GAAa,CACxD7B,MAAO4B,EAAMM,OAAOlC,MACpBuB,MAAOY,YAAcP,EAAMM,OAAOlC,MAAOgC,EAAKjB,MAAMC,SAASa,GAAaT,YAC1E/B,SAAS,MAGjB2C,EAAKI,SAAS,CAACpB,SAAUc,OAG7BO,cAAgB,SAACT,GACbA,EAAMU,iBACNN,EAAKlD,MAAMyD,OAAOP,EAAKjB,MAAMC,SAASC,MAAMjB,MAAMgC,EAAKjB,MAAMC,SAASQ,SAASxB,MAAOgC,EAAKjB,MAAMW,aAGrGc,sBAAuB,WACnBR,EAAKI,SAAS,SAAAK,GACV,MAAO,CAACf,UAAWe,EAAUf,gGAvB7BgB,KAAK5D,MAAM6D,gBAAkD,MAAhCD,KAAK5D,MAAM8D,kBACxCF,KAAK5D,MAAM+D,yDA0BX,IAAAC,EAAAJ,KACEK,EAAoB,GAC1B,IAAK,IAAIzC,KAAOoC,KAAK3B,MAAMC,SACvB+B,EAAkBzD,KAAK,CACnB0D,GAAG1C,EACH2C,OAAQP,KAAK3B,MAAMC,SAASV,KAGpC,IAAI4C,EAAOH,EAAkB3C,IAAI,SAAA+C,GAAW,OACxCC,EAAA3D,EAAAC,cAAC2D,EAAA,EAAD,CACI/C,IAAK6C,EAAYH,GACjBxD,YAAa2D,EAAYF,OAAOzD,YAChCO,cAAeoD,EAAYF,OAAOlD,cAClCC,MAAOmD,EAAYF,OAAOjD,MAC1Bb,SAAUgE,EAAYF,OAAO1B,MAC7BnC,eAAgB+D,EAAYF,OAAO7B,WACnC/B,QAAS8D,EAAYF,OAAO5D,QAC5Ba,QAAS,SAAC0B,GAAD,OAAWkB,EAAKnB,oBAAoBC,EAAMuB,EAAYH,SAGpEN,KAAK5D,MAAMwE,UACVJ,EAAOE,EAAA3D,EAAAC,cAAC6D,EAAA,EAAD,OAGX,IAAIC,EAAe,KAEhBd,KAAK5D,MAAM2E,QACVD,EACIJ,EAAA3D,EAAAC,cAAA,SAAIgD,KAAK5D,MAAM2E,MAAMC,UAI7B,IAAIC,EAAe,KAKnB,OAJGjB,KAAK5D,MAAM8E,kBACVD,EAAgBP,EAAA3D,EAAAC,cAACmE,EAAA,EAAD,CAAUC,GAAIpB,KAAK5D,MAAM8D,oBAIzCQ,EAAA3D,EAAAC,cAAA,OAAKG,UAAWZ,IAAI4B,MACf8C,EACAH,EACDJ,EAAA3D,EAAAC,cAAA,QAAMqE,SAAUrB,KAAKL,eAChBa,EACDE,EAAA3D,EAAAC,cAACsE,EAAA,EAAD,CAAQC,QAAQ,WAAhB,WAEJb,EAAA3D,EAAAC,cAACsE,EAAA,EAAD,CACIE,QAASxB,KAAKF,sBACdyB,QAAQ,UAFZ,aAEiCvB,KAAK3B,MAAMW,SAAU,SAAW,kBA9G9DyC,aAsIJC,sBAjBS,SAAArD,GACpB,MAAM,CACFuC,QAASvC,EAAMsD,KAAKf,QACpBG,MAAO1C,EAAMsD,KAAKZ,MAClBG,gBAAsC,OAArB7C,EAAMsD,KAAKC,MAC5B3B,eAAgB5B,EAAMwD,cAAcC,SACpC5B,iBAAkB7B,EAAMsD,KAAKzB,mBAIV,SAAA6B,GACvB,MAAM,CACFlC,OAAQ,SAACtB,EAAOO,EAAWE,GAAnB,OAAgC+C,EAASC,IAAazD,EAAOO,EAASE,KAC9EmB,sBAAuB,kBAAM4B,EAASC,IAA4B,SAI3DN,CAA4CvD","file":"static/js/3.8d52422c.chunk.js","sourcesContent":["import React from 'react';\r\nimport css from './Input.module.css';\r\n\r\nconst input = (props) => {\r\n    let inputElement = null;\r\n    const inputClasses = [css.InputElement];\r\n\r\n    if(props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(css.Invalid);\r\n    }\r\n\r\n    switch (props.elementType){\r\n        case('input'):\r\n            inputElement = <input \r\n                className={inputClasses.join(' ')} \r\n                {...props.elementConfig} \r\n                value={props.value} \r\n                onChange={props.changed} />;\r\n            break;\r\n        case('textarea'):\r\n            inputElement = <textarea \r\n                className={inputClasses.join(' ')} \r\n                {...props.elementConfig}  \r\n                value={props.value} \r\n                onChange={props.changed} />;\r\n             break;\r\n        case('select'):\r\n            inputElement = (\r\n                <select \r\n                    className={inputClasses.join(' ')} \r\n                    value={props.value} \r\n                    onChange={props.changed}>\r\n                    {props.elementConfig.options.map(option => (\r\n                        <option key={option.value} value={option.value}>\r\n                            {option.displayName}\r\n                        </option> \r\n                    ))}\r\n                </select>\r\n            );\r\n        break;     \r\n        default:\r\n            inputElement = <input \r\n                className={inputClasses.join(' ')} \r\n                {...props.elementConfig} \r\n                value={props.value} \r\n                onChange={props.changed} />;\r\n    }\r\n\r\n    return(\r\n        <div className={css.Input}>\r\n            <label className={css.Label}>{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    );\r\n   \r\n};\r\n\r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__2ZV87\",\"Label\":\"Input_Label__ja0xa\",\"InputElement\":\"Input_InputElement__1vyzg\",\"Invalid\":\"Input_Invalid__oosLe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__TjFUF\",\"ContactData\":\"Auth_ContactData__3iJzt\"};","import React, { Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport css from './Auth.module.css';\r\nimport * as actions from '../../store/actions/index';\r\nimport { updateObject, checkValidity} from '../../shared/utility'\r\n\r\nclass Auth extends Component {\r\n    state = {\r\n        controls: {\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig:{\r\n                    type: 'email',\r\n                    placeholder: 'Mail Address'\r\n                },\r\n                value: '',\r\n                validation:{\r\n                    required:true,\r\n                    isEmail: true\r\n                },\r\n                valid:false,\r\n                touched: false\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig:{\r\n                    type: 'password',\r\n                    placeholder: 'Password'\r\n                },\r\n                value: '',\r\n                validation:{\r\n                    required:true,\r\n                    minLength: 6\r\n                },\r\n                valid:false,\r\n                touched: false\r\n            }\r\n        },\r\n        isSignup: true\r\n    }\r\n\r\n    componentDidMount(){\r\n        if(!this.props.buildingBurger && this.props.authRedirectPath !== '/'){\r\n            this.props.onSetAuthRedirectPath();\r\n        }\r\n    }\r\n\r\n    inputChangedHandler = (event, controlName ) => {\r\n        const updatedControls = updateObject(this.state.controls,{\r\n            [controlName]:updateObject(this.state.controls[controlName],{\r\n                value: event.target.value,\r\n                valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\r\n                touched: true\r\n            })\r\n        });\r\n        this.setState({controls: updatedControls});\r\n    }\r\n\r\n    submitHandler = (event) => {\r\n        event.preventDefault();\r\n        this.props.onAuth(this.state.controls.email.value,this.state.controls.password.value, this.state.isSignup);\r\n    }\r\n\r\n    switchAuthModeHandler= () => {\r\n        this.setState(prevState => {\r\n            return {isSignup: !prevState.isSignup};\r\n        })\r\n    }\r\n\r\n    render(){\r\n        const formElementsArray = [];\r\n        for (let key in this.state.controls) {\r\n            formElementsArray.push({\r\n                id:key,\r\n                config: this.state.controls[key]\r\n            });\r\n        }\r\n        let form = formElementsArray.map(formElement => (\r\n            <Input \r\n                key={formElement.id}\r\n                elementType={formElement.config.elementType} \r\n                elementConfig={formElement.config.elementConfig} \r\n                value={formElement.config.value} \r\n                invalid={!formElement.config.valid}\r\n                shouldValidate={formElement.config.validation}\r\n                touched={formElement.config.touched}\r\n                changed={(event) => this.inputChangedHandler(event,formElement.id)} />\r\n        ));\r\n        \r\n        if(this.props.loading){\r\n            form = <Spinner />\r\n        }\r\n\r\n        let errorMessage = null;\r\n\r\n        if(this.props.error){\r\n            errorMessage = (\r\n                <p>{this.props.error.message}</p>\r\n            );\r\n        }\r\n\r\n        let authRedirect = null;\r\n        if(this.props.isAuthenticated){\r\n            authRedirect =  <Redirect to={this.props.authRedirectPath} />\r\n        }\r\n\r\n        return (\r\n            <div className={css.Auth}>\r\n                {authRedirect}\r\n                {errorMessage}\r\n                <form onSubmit={this.submitHandler}>\r\n                    {form}\r\n                    <Button btnType=\"Success\" >SUBMIT</Button>\r\n                </form>\r\n                <Button \r\n                    clicked={this.switchAuthModeHandler}\r\n                    btnType=\"Danger\" >SWITCH TO {this.state.isSignup? 'SIGNIN' : 'SIGNUP'}</Button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return{\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuthenticated: state.auth.token !== null,\r\n        buildingBurger: state.burgerBuilder.building,\r\n        authRedirectPath: state.auth.authRedirectPath\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return{\r\n        onAuth: (email, password , isSignup) => dispatch(actions.auth(email, password,isSignup)),\r\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Auth);\r\n"],"sourceRoot":""}