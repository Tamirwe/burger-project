{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_module_css__WEBPACK_IMPORTED_MODULE_1__","_Input_module_css__WEBPACK_IMPORTED_MODULE_1___default","input","props","inputElement","inputClasses","css","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","a","createElement","Object","assign","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayName","Input","Label","label","module","exports","ContactData","checkoutSummary","react_default","CheckoutSummary","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","state","orderForm","name","type","placeholder","validation","required","valid","street","zipCode","minLength","maxLength","country","email","deliveryMethod","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","_this","order","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","defineProperty","setState","_this2","this","formElementsArray","id","config","form","onSubmit","formElement","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","Redirect","to","purchasedRedirect","purchased","Route","path","match","component"],"mappings":"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","file":"static/js/1.0a1b0126.chunk.js","sourcesContent":["import React from 'react';\r\nimport css from './Input.module.css';\r\n\r\nconst input = (props) => {\r\n    let inputElement = null;\r\n    const inputClasses = [css.InputElement];\r\n\r\n    if(props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(css.Invalid);\r\n    }\r\n\r\n    switch (props.elementType){\r\n        case('input'):\r\n            inputElement = <input \r\n                className={inputClasses.join(' ')} \r\n                {...props.elementConfig} \r\n                value={props.value} \r\n                onChange={props.changed} />;\r\n            break;\r\n        case('textarea'):\r\n            inputElement = <textarea \r\n                className={inputClasses.join(' ')} \r\n                {...props.elementConfig}  \r\n                value={props.value} \r\n                onChange={props.changed} />;\r\n             break;\r\n        case('select'):\r\n            inputElement = (\r\n                <select \r\n                    className={inputClasses.join(' ')} \r\n                    value={props.value} \r\n                    onChange={props.changed}>\r\n                    {props.elementConfig.options.map(option => (\r\n                        <option key={option.value} value={option.value}>\r\n                            {option.displayName}\r\n                        </option> \r\n                    ))}\r\n                </select>\r\n            );\r\n        break;     \r\n        default:\r\n            inputElement = <input \r\n                className={inputClasses.join(' ')} \r\n                {...props.elementConfig} \r\n                value={props.value} \r\n                onChange={props.changed} />;\r\n    }\r\n\r\n    return(\r\n        <div className={css.Input}>\r\n            <label className={css.Label}>{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    );\r\n   \r\n};\r\n\r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__2ZV87\",\"Label\":\"Input_Label__ja0xa\",\"InputElement\":\"Input_InputElement__1vyzg\",\"Invalid\":\"Input_Invalid__oosLe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__3VCQf\"};","import React from 'react';\r\nimport Burger from '../../Burger/Burger';\r\nimport Button from '../../UI/Button/Button';\r\nimport css from './CheckoutSummary';\r\n\r\nconst checkoutSummary = (props) => {\r\n    return ( \r\n        <div className={css.CheckoutSummary}>\r\n        <h1>We hope it tase well!</h1>\r\n            <div style={{width:'100%', margin:'auto'}}> \r\n                <Burger ingredients={props.ingredients} />\r\n            </div>\r\n            <Button \r\n                btnType=\"Danger\"\r\n                clicked={props.checkoutCancelled}>CANCEL</Button>\r\n            <Button \r\n                btnType=\"Success\"\r\n                clicked={props.checkoutContinued}>CONTINUE</Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default checkoutSummary","import React, { Component} from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport css from './ContactData.module.css';\r\nimport axios from '../../../axios-orders';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as actions from '../../../store/actions/index';\r\nimport { updateObject, checkValidity} from '../../../shared/utility'\r\n\r\nclass ContactData extends Component {\r\n    state={\r\n        orderForm:{\r\n                name: {\r\n                    elementType: 'input',\r\n                    elementConfig:{\r\n                        type: 'text',\r\n                        placeholder: 'Your Name'\r\n                    },\r\n                    value: '',\r\n                    validation:{\r\n                        required:true\r\n                    },\r\n                    valid:false,\r\n                    touched: false\r\n                },\r\n                street: {\r\n                    elementType: 'input',\r\n                    elementConfig:{\r\n                        type: 'text',\r\n                        placeholder: 'Street'\r\n                    },\r\n                    value: '',\r\n                    validation:{\r\n                        required:true\r\n                    },\r\n                    valid:false,\r\n                    touched: false\r\n                },\r\n                zipCode: {\r\n                    elementType: 'input',\r\n                    elementConfig:{\r\n                        type: 'text',\r\n                        placeholder: 'ZIP Code'\r\n                    },\r\n                    value: '',\r\n                    validation:{\r\n                        required:true,\r\n                        minLength:5,\r\n                        maxLength:5\r\n                    },\r\n                    valid:false,\r\n                    touched: false\r\n                },\r\n                country: {\r\n                    elementType: 'input',\r\n                    elementConfig:{\r\n                        type: 'text',\r\n                        placeholder: 'Country'\r\n                    },\r\n                    value: '',\r\n                    validation:{\r\n                        required:true\r\n                    },\r\n                    valid:false,\r\n                    touched: false\r\n                },\r\n                email: {\r\n                    elementType: 'input',\r\n                    elementConfig:{\r\n                        type: 'temailext',\r\n                        placeholder: 'Your E-Mail'\r\n                    },\r\n                    value: '',\r\n                    validation:{\r\n                        required:true\r\n                    },\r\n                    valid:false,\r\n                    touched: false\r\n                },\r\n                deliveryMethod: {\r\n                    elementType: 'select',\r\n                    elementConfig:{\r\n                        options:[\r\n                            {value: 'fastest', displayName: 'Fastest'},\r\n                            {value: 'cheapest', displayName: 'Cheapest'}\r\n                        ]\r\n                    },\r\n                    value: 'fastest',\r\n                    validation:{},\r\n                    valid:true,\r\n                }\r\n        },\r\n        formIsValid: false\r\n    }\r\n\r\n    orderHandler =(event) =>{\r\n        event.preventDefault();\r\n     \r\n        const formData = {};\r\n        for(let formElementIdentifier in this.state.orderForm){\r\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\r\n        }\r\n        const order = {\r\n            ingredients: this.props.ings,\r\n            price: this.props.price,\r\n            orderData:formData,\r\n            userId: this.props.userId\r\n        }\r\n        this.props.onOrderBurger(order, this.props.token);\r\n    }\r\n\r\n    inputChangedHandler = (event, inputIdentifier ) => {\r\n\r\n        const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier],{\r\n            value: event.target.value,\r\n            valid:checkValidity(event.target.value,this.state.orderForm[inputIdentifier].validation),\r\n            touched:true\r\n        });\r\n        const updatedOrderForm = updateObject(this.state.orderForm,{\r\n            [inputIdentifier]:updatedFormElement\r\n        })\r\n\r\n        let formIsValid = true;\r\n        for(let inputIdentifier in updatedOrderForm){\r\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n        }\r\n\r\n        this.setState({orderForm: updatedOrderForm, formIsValid : formIsValid });\r\n    }\r\n\r\n    render(){\r\n        const formElementsArray = [];\r\n        for (let key in this.state.orderForm) {\r\n            formElementsArray.push({\r\n                id:key,\r\n                config: this.state.orderForm[key]\r\n            });\r\n        }\r\n        let form = (\r\n            <form onSubmit={this.orderHandler} >\r\n                {formElementsArray.map(formElement => (\r\n                    <Input \r\n                        key={formElement.id}\r\n                        elementType={formElement.config.elementType} \r\n                        elementConfig={formElement.config.elementConfig} \r\n                        value={formElement.config.value} \r\n                        invalid={!formElement.config.valid}\r\n                        shouldValidate={formElement.config.validation}\r\n                        touched={formElement.config.touched}\r\n                        changed={(event) => this.inputChangedHandler(event,formElement.id)} />\r\n                ))}\r\n                <Button btnType=\"Success\" clicked={this.orderHandler} disabled={!this.state.formIsValid}>ORDER</Button>\r\n            </form>\r\n        );\r\n        if(this.props.loading){\r\n            form=<Spinner/>;\r\n        }\r\n        return(\r\n            \r\n            <div className={css.ContactData}>\r\n                <h4>Enter your Contact Data</h4>\r\n                {form}\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return{\r\n        ings: state.burgerBuilder.ingredients,\r\n        price: state.burgerBuilder.totalPrice,\r\n        loading: state.order.loading,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return{\r\n        onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(withErrorHandler(ContactData,axios));\r\n","import React, { Component} from 'react';\r\nimport {Route, Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\n\r\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\r\nimport ContactData from './ContactData/ContactData';\r\n\r\nclass Checkout extends Component {\r\n    \r\n\r\n    checkoutCancelledHandler = () =>{\r\n        this.props.history.goBack();\r\n    }\r\n    checkoutContinuedHandler = () =>{\r\n        this.props.history.replace('/checkout/contact-data');\r\n    }\r\n\r\n    render(){\r\n        let summary = <Redirect to=\"/\" />\r\n        if(this.props.ings){\r\n            const purchasedRedirect = this.props.purchased ? <Redirect to=\"/\" /> : null;\r\n            summary =(\r\n                <div>\r\n                    {purchasedRedirect}\r\n                    <CheckoutSummary \r\n                        ingredients={this.props.ings}\r\n                        checkoutCancelled={this.checkoutCancelledHandler}\r\n                        checkoutContinued={this.checkoutContinuedHandler} />\r\n                    <Route \r\n                    path={this.props.match.path + '/contact-data'} \r\n                    component={ContactData} />\r\n                </div>\r\n            )\r\n        }\r\n        return summary\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return{\r\n        ings: state.burgerBuilder.ingredients,\r\n        purchased: state.order.purchased\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Checkout);\r\n"],"sourceRoot":""}